package nl.roymprog.cardsscore.models;

import nl.roymprog.cardsscore.models.requests.ChineesPoepenObjectFactory;
import nl.roymprog.cardsscore.models.requests.PlayersObjectFactory;
import nl.roymprog.cardsscore.models.requests.ScoresObjectFactory;
import org.junit.Test;

import java.util.List;
import java.util.Optional;

import static org.junit.Assert.*;

public class ChineesPoepenTest {

  @Test
  public void testGetRoundScores() {
    ChineesPoepen cp = ChineesPoepenObjectFactory.getChineesPoepen();

    List<ChineesPoepen.Score> scores = cp.getRoundScores();

    assertEquals(4, scores.size());
  }

  @Test
  public void roundScoresCalledValid() {
    ChineesPoepen cp = ChineesPoepenObjectFactory.getChineesPoepen();
    assertTrue(cp.roundScoresCalledValid());
  }

  @Test
  public void roundScoresCalledInvalid() {
    ChineesPoepen cp = ChineesPoepen.builder()
            .round(1)
            .scores(ScoresObjectFactory.getInvalidCalledScore())
            .build();
    assertFalse(cp.roundScoresCalledValid());
  }

  @Test
  public void roundScoresScoredValid() {
    ChineesPoepen cp = ChineesPoepenObjectFactory.getChineesPoepen();
    assertTrue(cp.roundScoresCalledValid());
  }

  @Test
  public void roundScoresScoredInvalid() {
    ChineesPoepen cp = ChineesPoepen.builder()
            .round(1)
            .scores(ScoresObjectFactory.getInvalidScoredScore())
            .build();
    assertFalse(cp.roundScoresScoredValid());
  }

  @Test
  public void getScore() {
    ChineesPoepen cp = ChineesPoepenObjectFactory.getChineesPoepen();
    Optional<Integer> score = cp.getScore(PlayersObjectFactory.PLAYER_1);
    assertEquals(5, score.get().intValue());
    score = cp.getScore(PlayersObjectFactory.PLAYER_2);
    assertEquals(5, score.get().intValue());
    score = cp.getScore(PlayersObjectFactory.PLAYER_3);
    assertEquals(5, score.get().intValue());
    score = cp.getScore(PlayersObjectFactory.PLAYER_4);
    assertEquals(-1, score.get().intValue());
  }

  @Test
  public void testFullGame() {
    ChineesPoepen cp = ChineesPoepenObjectFactory.getChineesPoepenFullGame();
    Optional<Integer> score = cp.getScore(PlayersObjectFactory.PLAYER_1);
    assertEquals(63, score.get().intValue());
    score = cp.getScore(PlayersObjectFactory.PLAYER_2);
    assertEquals(31, score.get().intValue());
    score = cp.getScore(PlayersObjectFactory.PLAYER_3);
    assertEquals(43, score.get().intValue());
    score = cp.getScore(PlayersObjectFactory.PLAYER_4);
    assertEquals(51, score.get().intValue());
  }
}